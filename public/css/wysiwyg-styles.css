/*
 * @name: @wysiwyg
 * @args: $margin-side, $margin-bottom, $image-max-width
 * @description: Applies to an element that contains WYSIWYG
 *               content. Gives sensible default margin values
 *               and max-width for floated image child elements.
 */
/*
 * @name: @standard-transition
 * @args: $properties, $duration, $easing, $delay
 * @description: Applies transition properties to an element
 *               with a 'standard' duration, easing, and delay.
 *               default usage: @include standard-transition(color background-color)
 *               Properties are added to the first argument separated
 *               by spaces. Next arguments set duration, easing and delay
 *               or use the default if omitted.
 */
.editable-content h1, .ql-editor h1,
.editable-content h2,
.ql-editor h2,
.editable-content h3,
.ql-editor h3,
.editable-content h4,
.ql-editor h4,
.editable-content h5,
.ql-editor h5,
.editable-content h6,
.ql-editor h6 {
  margin-bottom: 1.3rem;
}

.editable-content p, .ql-editor p {
  margin: 24px 0;
}

.editable-content a, .ql-editor a {
  text-decoration: underline;
}

.editable-content img, .ql-editor img {
  max-width: 100%;
  height: auto;
}

.editable-content img[style^="float:left;"], .ql-editor img[style^="float:left;"],
.editable-content img[style^="float: left;"], .ql-editor img[style^="float: left;"],
.editable-content img[style^="float :left;"], .ql-editor img[style^="float :left;"],
.editable-content img[style*=" float:left;"], .ql-editor img[style*=" float:left;"],
.editable-content img[style*=" float: left;"], .ql-editor img[style*=" float: left;"],
.editable-content img[style*=" float :left;"], .ql-editor img[style*=" float :left;"] {
  margin-right: 32px;
  margin-bottom: 32px;
}

.editable-content img[style^="float:right;"], .ql-editor img[style^="float:right;"],
.editable-content img[style^="float: right;"], .ql-editor img[style^="float: right;"],
.editable-content img[style^="float :right;"], .ql-editor img[style^="float :right;"],
.editable-content img[style*=" float:right;"], .ql-editor img[style*=" float:right;"],
.editable-content img[style*=" float: right;"], .ql-editor img[style*=" float: right;"],
.editable-content img[style*=" float :right;"], .ql-editor img[style*=" float :right;"] {
  margin-left: 32px;
  margin-bottom: 32px;
}

.editable-content::after, .ql-editor::after {
  clear: both;
  content: "";
  display: table;
}

.editable-content > *:first-child, .ql-editor > *:first-child {
  margin-top: 0;
}

.editable-content strong, .ql-editor strong {
  font-weight: 700;
}

.editable-content em, .ql-editor em {
  font-style: italic;
}

.filter-parent{
  cursor: pointer;
}

.editable-content ul, .ql-editor ul {
  list-style-type: disc;
  margin-bottom: 16px;
  padding-left: 1.1em;
}

.editable-content ul > li, .ql-editor ul > li {
  margin-bottom: 16px;
}

.editable-content ul > li:last-child, .ql-editor ul > li:last-child {
  margin-bottom: 0;
}

.editable-content hr, .ql-editor hr {
  border-bottom: 0px solid transparent;
  border-left: 0;
  border-right: 0;
  border-top: 0;
  margin: 8px 0;
}

.ql-editor {
  font-family: Helvetica, Arial, sans-serif;
  -webkit-font-feature-settings: "kern", "liga", "pnum";
          font-feature-settings: "kern", "liga", "pnum";
  font-size: 16px;
  -webkit-text-size-adjust: 100%;
     -moz-text-size-adjust: 100%;
      -ms-text-size-adjust: 100%;
          text-size-adjust: 100%;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1.5;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/