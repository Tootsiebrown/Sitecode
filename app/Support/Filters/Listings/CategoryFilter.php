<?php

namespace App\Support\Filters\Listings;

use App\Http\Controllers\GetsDenormalizedProductCategories;
use App\Models\Listing;
use App\Models\ProductCategory;
use App\Support\Filters\Filter;
use Illuminate\Contracts\Pagination\Paginator;
use Illuminate\Database\Eloquent\Builder;
use Wax\Core\Filters\FilterOption;

class CategoryFilter extends Filter
{
    use GetsDenormalizedProductCategories;

    protected $model = ProductCategory::class;
    protected $baseModel = Listing::class;
    protected $relation = 'categories';
    protected $inverseRelation = 'listings';
    protected $name = 'category';
    protected $value = null;

    public function setValue($value)
    {
        return parent::setValue($value); // TODO: Change the autogenerated stub
    }

    public function filterQuery(Builder $query)
    {
        if ($this->isActive) {
            $query->whereHas('categories', function ($query) {
                if (is_numeric($this->value)) {
                    $query->where('product_categories.id', (int)$this->value);
                } else {
                    $query->where('product_categories.secret_key', $this->value);
                }
            });
        }
    }

    public function getOptions($possibilitiesQuery)
    {
        $possibilities = $possibilitiesQuery->pluck('id');
        $level = 0;
        $level1Category = null;
        $level2Category = null;
        $level3Category = null;
        if (! empty($this->value)) {
            if (is_numeric($this->value)) {
                $theCategory = ProductCategory::with('parent.parent')->find($this->value);
            } else {
                $theCategory = ProductCategory::with('parent.parent')
                    ->where('secret_key', $this->value)
                    ->first();
            }

            if ($theCategory) {
                $level = 1;
                $level1Category = $theCategory;

                if ($level1Category->parent) {
                    $level = 2;
                    $level2Category = $level1Category;
                    $level1Category = $level2Category->parent;

                    if ($level1Category->parent) {
                        $level = 3;
                        $level3Category = $level2Category;
                        $level2Category = $level3Category->parent;
                        $level1Category = $level2Category->parent;
                    }
                }
            }
        }

        return ProductCategory::with($this->getOptimizedWith($level))
            ->top()
            ->when($level > 0, function ($query) use ($level1Category) {
                return $query->where('id', $level1Category->id);
            })
            ->get()
            ->map(function ($category) use ($possibilities, $level, $level2Category) {
                $possibilitiesQuery = $category->secret
                    ? $category->listingsWithSecret
                    : $category->listings;

                $possibilitiesCount = $possibilitiesQuery->pluck('id')->intersect($possibilities)->count();

                $extras = [
                    'count' => $possibilitiesCount,
                    'secret' => $category->secret,
                    'childSelected' => false,
                ];

                $inSecret = $category->secret;
                if ($level > 0) {
                    $extras['children'] = $category
                        ->children
                        ->when($level > 1, function ($query) use ($level2Category) {
                            return $query->where('id', $level2Category->id);
                        })
                        ->map(function ($category) use ($possibilities, $level, $inSecret) {
                            $possibilitiesQuery = $inSecret
                                ? $category->listingsWithSecret
                                : $category->listings;

                            $possibilitiesCount = $possibilitiesQuery->pluck('id')->intersect($possibilities)->count();
                            $extras = [
                                'count' => $possibilitiesCount,
                                'childSelected' => false,
                            ];
                            if ($level > 1) {
                                $extras['children'] = $category
                                    ->children
                                    ->map(function ($category) use ($possibilities, $inSecret) {
                                        $possibilitiesQuery = $inSecret
                                            ? $category->listingsWithSecret
                                            : $category->listings;

                                        $possibilitiesCount = $possibilitiesQuery->pluck('id')->intersect($possibilities)->count();
                                        return new FilterOption(
                                            $category->name,
                                            $category->secret || $inSecret
                                                ? $category->secret_key
                                                : $category->id,
                                            [
                                                'count' => $possibilitiesCount,
                                            ],
                                            $possibilitiesCount > 0,
                                            $category->secret || $inSecret
                                                ? $category->secret_key === $this->value
                                                : $category->id === (int)$this->value
                                        );
                                    });
                                if ($extras['children']->filter->isSelected->isNotEmpty()) {
                                    $extras['childSelected'] = true;
                                }
                            }
                            return new FilterOption(
                                $category->name,
                                $category->secret || $inSecret
                                    ? $category->secret_key
                                    : $category->id,
                                $extras,
                                $category->listings->pluck('id')->intersect($possibilities)->count() > 0,
                                $category->secret || $inSecret
                                    ? $category->secret_key === $this->value
                                    : $category->id === (int)$this->value
                            );
                        });

                    $childSelected = $extras['children']
                        ->filter(function ($option) {
                            return $option->extras['childSelected']
                                || $option->isSelected;
                        })
                        ->isNotEmpty();

                    if ($childSelected) {
                        $extras['childSelected'] = true;
                    }
                }

                $option = new FilterOption(
                    $category->name,
                    $category->secret
                        ? $category->secret_key
                        : $category->id,
                    $extras,
                    $extras['count'] > 0,
                    $category->secret
                        ? $category->secret_key === $this->value
                        : $category->id === (int)$this->value
                );

                return $option;
            });
    }

    public function appendToPaginator(Paginator $paginator)
    {
        if (!empty($this->value)) {
            $paginator->appends('category', $this->value);
        }
    }

    protected function getOptimizedWith($level)
    {
        $with = [];

        if ($level === 0) {
            $with[] = 'listings';
        }

        if ($level === 1) {
            $with[] = 'children.listings';
        }

        if ($level === 2) {
            $with[] = 'children.children.listings';
        }

        if ($level === 3) {
            $with[] = 'children.children.listings';
        }

        return $with;
    }
}
